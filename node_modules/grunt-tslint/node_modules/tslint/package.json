{
  "name": "tslint",
  "version": "0.2.10",
  "description": "a static analysis linter for TypeScript",
  "bin": {
    "tslint": "./bin/tslint"
  },
  "main": "./lib/tslint",
  "repository": {
    "type": "git",
    "url": "https://github.com/palantir/tslint.git"
  },
  "keywords": [
    "cli",
    "typescript",
    "linter"
  ],
  "scripts": {
    "test": "grunt"
  },
  "dependencies": {
    "optimist": "~0.6.0"
  },
  "devDependencies": {
    "chai": "~1.7.2",
    "grunt": "~0.4.1",
    "grunt-contrib-clean": "~0.5.0",
    "grunt-mocha-test": "~0.6.2",
    "grunt-tslint": "~0.2.2",
    "grunt-typescript": "~0.2.1"
  },
  "license": "Apache 2.0",
  "readme": "tslint [![NPM version](https://badge.fury.io/js/tslint.png)](http://badge.fury.io/js/tslint)\n======\n\nA linter for the TypeScript language.\n\nSupported Rules\n-----\n\n* `bitwise` disallows bitwise operators.\n* `classname` enforces PascalCased class and interface names.\n* `curly` enforces braces for `if`/`for`/`do`/`while` statements.\n* `debug` disallows `debugger` statements.\n* `dupkey` disallows duplicate keys in object literals.\n* `eofline` enforces the file to end with a newline.\n* `eqeqeq` enforces === and !== in favor of == and !=.\n* `evil` disallows `eval` function invocations.\n* `forin` enforces a `for ... in` statement to be filtered with an `if` statement.*\n* `indent` enforces consistent indentation levels (currently disabled).\n* `labelpos` enforces labels only on sensible statements.\n* `label-undefined` checks that labels are defined before usage.\n* `maxlen` sets the maximum length of a line.\n* `noarg` disallows access to `arguments.callee`.\n* `noconsole` disallows access to the specified properties on `console`. Rule options are properties to ban on the console variable.\n* `noconstruct` disallows access to the constructors of `String`, `Number`, and `Boolean`.\n* `nounreachable` disallows unreachable code after `break`, `catch`, `throw`, and `return` statements.\n* `noempty` disallows empty blocks.\n* `oneline` enforces the specified tokens to be on the same line as the expression preceding it. Rule options:\n\t* `\"check-catch\"` checks that `catch` is on the same line as the closing brace for `try`\n\t* `\"check-else\"` checks that `else` is on the same line as the closing brace for `if`\n\t* `\"check-open-brace\"` checks that an open brace falls on the same line as its preceding expression.\n\t* `\"check-whitespace\"` checks preceding whitespace for the specified tokens.\n* `quotemark` enforces consistent single or double quoted string literals.\n* `radix` enforces the radix parameter of `parseInt`\n* `semicolon` enforces semicolons at the end of every statement.\n* `sub` disallows object access via string literals.\n* `trailing` disallows trailing whitespace at the end of a line.\n* `varname` allows only camelCased or UPPER_CASED variable names.\n* `whitespace` enforces spacing whitespace. Rule options:\n\t* `\"check-branch\"` checks branching statements (`if`/`else`/`for`/`while`) are followed by whitespace\n\t* `\"check-decl\"`checks that variable declarations have whitespace around the equals token\n\t* `\"check-operator\"` checks for whitespace around operator tokens\n\t* `\"check-separator\"` checks for whitespace after separator tokens (`,`/`;`)\n\t* `\"check-type\"` checks for whitespace before a variable type specification\n\n\nInstallation\n------------\n\n##### CLI\n\n    sudo npm install tslint -g\n\n##### Library\n\n    npm install tslint\n\nUsage\n-----\n\nPlease first ensure that the TypeScript source files compile correctly.\n\n##### CLI\n\n    usage: tslint\n\n\tOptions:\n\t  -c, --config  configuration file\n\t  -f, --file    file to lint                 [required]\n\t  -o, --out     output file\n\t  -t, --format  output format (prose, json)  [default: \"prose\"]\n\nBy default, configuration is loaded from `.tslintrc` or `tslint.json`, if either exists in the current path.\n\n##### Library\n\n\tvar options = {\n\t\tformatter: \"json\",\n\t    configuration: configuration\n\t};\n\n\tvar Linter = require(\"tslint\");\n\n\tvar ll = new Linter(fileName, contents, options);\n\tvar result = ll.lint();\n\nDevelopment\n-----------\n\n### Setup ###\n\n    git clone git@github.com:palantir/tslint.git\n    cd tslint\n    git submodule init\n    git submodule update\n\n### Build ###\n\n    npm install\n    grunt\n\nTODO\n----\n* Add more rules from jshint\n* Disallow variables referenced outside of their scope definition\n* Disallow unused variables\n* Support pluggable formatters\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/palantir/tslint/issues"
  },
  "_id": "tslint@0.2.10",
  "dist": {
    "shasum": "4dac60012f735de0094ed054274af8d2d0a92be8"
  },
  "_from": "tslint@~0.2.1",
  "_resolved": "https://registry.npmjs.org/tslint/-/tslint-0.2.10.tgz"
}
