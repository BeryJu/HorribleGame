{"fragment":"precision mediump float;\r\n\r\nuniform lowp int renderType;\r\n\r\nuniform sampler2D map;\r\nuniform sampler2D occlusionMap;\r\nuniform float opacity;\r\nuniform vec3 color;\r\n\r\nvarying vec2 vUV;\r\n\r\nvoid main() {\r\n\r\n\t// pink square\r\n\r\n\tif( renderType == 0 ) {\r\n\r\n\t\tgl_FragColor = vec4( texture2D( map, vUV ).rgb, 0.0 );\r\n\r\n\t// restore\r\n\r\n\t} else if( renderType == 1 ) {\r\n\r\n\t\tgl_FragColor = texture2D( map, vUV );\r\n\r\n\t// flare\r\n\r\n\t} else {\r\n\r\n\t\tfloat visibility = texture2D( occlusionMap, vec2( 0.5, 0.1 ) ).a;\r\n\t\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) ).a;\r\n\t\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) ).a;\r\n\t\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) ).a;\r\n\t\tvisibility = ( 1.0 - visibility / 4.0 );\r\n\r\n\t\tvec4 texture = texture2D( map, vUV );\r\n\t\ttexture.a *= opacity * visibility;\r\n\t\tgl_FragColor = texture;\r\n\t\tgl_FragColor.rgb *= color;\r\n\r\n\t}\r\n\r\n}","vertex":"uniform lowp int renderType;\r\n\r\nuniform vec3 screenPosition;\r\nuniform vec2 scale;\r\nuniform float rotation;\r\n\r\nattribute vec2 position;\r\nattribute vec2 uv;\r\n\r\nvarying vec2 vUV;\r\n\r\nvoid main() {\r\n\r\n\tvUV = uv;\r\n\r\n\tvec2 pos = position;\r\n\r\n\tif( renderType == 2 ) {\r\n\r\n\t\tpos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\r\n\t\tpos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\r\n\r\n\t}\r\n\r\n\tgl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\r\n\r\n}"}