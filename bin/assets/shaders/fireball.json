{"fragment":"varying vec2 vUv;\r\nvarying float noise;\r\nuniform sampler2D explosionTexture;\r\n\r\nfloat random( vec3 scale, float seed ){\r\n\treturn fract( sin( dot( gl_FragCoord.xyz + seed, scale ) ) * 43758.5453 + seed ) ;\r\n}\r\n\r\nvoid main() {\r\n\r\n\t// get a random offset\r\n\tfloat r = .01 * random( vec3( 12.9898, 78.233, 151.7182 ), 0.0 );\r\n\t// lookup vertically in the texture, using noise and offset\r\n\t// to get the right RGB colour\r\n\tvec2 tPos = vec2( 0, 1.0 - 1.3 * noise + r );\r\n\tvec4 color = texture2D( explosionTexture, tPos );\r\n\r\n\tgl_FragColor = vec4( color.rgb, 1.0 );\r\n\r\n}","vertex":"//\r\n// GLSL textureless classic 3D noise \"cnoise\",\r\n// with an RSL-style periodic variant \"pnoise\".\r\n// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\r\n// Version: 2011-10-11\r\n//\r\n// Many thanks to Ian McEwan of Ashima Arts for the\r\n// ideas for permutation and gradient selection.\r\n//\r\n// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\r\n// Distributed under the MIT license. See LICENSE file.\r\n// https://github.com/ashima/webgl-noise\r\n//\r\n\r\nvec3 mod289(vec3 x)\r\n{\r\n\treturn x - floor(x * (1.0 / 289.0)) * 289.0;\r\n}\r\n\r\nvec4 mod289(vec4 x)\r\n{\r\n\treturn x - floor(x * (1.0 / 289.0)) * 289.0;\r\n}\r\n\r\nvec4 permute(vec4 x)\r\n{\r\n\treturn mod289(((x*34.0)+1.0)*x);\r\n}\r\n\r\nvec4 taylorInvSqrt(vec4 r)\r\n{\r\n\treturn 1.79284291400159 - 0.85373472095314 * r;\r\n}\r\n\r\nvec3 fade(vec3 t) {\r\n\treturn t*t*t*(t*(t*6.0-15.0)+10.0);\r\n}\r\n\r\n// Classic Perlin noise\r\nfloat cnoise(vec3 P)\r\n{\r\n\tvec3 Pi0 = floor(P); // Integer part for indexing\r\n\tvec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\r\n\tPi0 = mod289(Pi0);\r\n\tPi1 = mod289(Pi1);\r\n\tvec3 Pf0 = fract(P); // Fractional part for interpolation\r\n\tvec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\r\n\tvec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\r\n\tvec4 iy = vec4(Pi0.yy, Pi1.yy);\r\n\tvec4 iz0 = Pi0.zzzz;\r\n\tvec4 iz1 = Pi1.zzzz;\r\n\r\n\tvec4 ixy = permute(permute(ix) + iy);\r\n\tvec4 ixy0 = permute(ixy + iz0);\r\n\tvec4 ixy1 = permute(ixy + iz1);\r\n\r\n\tvec4 gx0 = ixy0 * (1.0 / 7.0);\r\n\tvec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\r\n\tgx0 = fract(gx0);\r\n\tvec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\r\n\tvec4 sz0 = step(gz0, vec4(0.0));\r\n\tgx0 -= sz0 * (step(0.0, gx0) - 0.5);\r\n\tgy0 -= sz0 * (step(0.0, gy0) - 0.5);\r\n\r\n\tvec4 gx1 = ixy1 * (1.0 / 7.0);\r\n\tvec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\r\n\tgx1 = fract(gx1);\r\n\tvec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\r\n\tvec4 sz1 = step(gz1, vec4(0.0));\r\n\tgx1 -= sz1 * (step(0.0, gx1) - 0.5);\r\n\tgy1 -= sz1 * (step(0.0, gy1) - 0.5);\r\n\r\n\tvec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\r\n\tvec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\r\n\tvec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\r\n\tvec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\r\n\tvec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\r\n\tvec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\r\n\tvec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\r\n\tvec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\r\n\r\n\tvec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\r\n\tg000 *= norm0.x;\r\n\tg010 *= norm0.y;\r\n\tg100 *= norm0.z;\r\n\tg110 *= norm0.w;\r\n\tvec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\r\n\tg001 *= norm1.x;\r\n\tg011 *= norm1.y;\r\n\tg101 *= norm1.z;\r\n\tg111 *= norm1.w;\r\n\r\n\tfloat n000 = dot(g000, Pf0);\r\n\tfloat n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\r\n\tfloat n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\r\n\tfloat n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\r\n\tfloat n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\r\n\tfloat n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\r\n\tfloat n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\r\n\tfloat n111 = dot(g111, Pf1);\r\n\r\n\tvec3 fade_xyz = fade(Pf0);\r\n\tvec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\r\n\tvec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\r\n\tfloat n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\r\n\treturn 2.2 * n_xyz;\r\n}\r\n\r\n// Classic Perlin noise, periodic variant\r\nfloat pnoise(vec3 P, vec3 rep)\r\n{\r\n\tvec3 Pi0 = mod(floor(P), rep); // Integer part, modulo period\r\n\tvec3 Pi1 = mod(Pi0 + vec3(1.0), rep); // Integer part + 1, mod period\r\n\tPi0 = mod289(Pi0);\r\n\tPi1 = mod289(Pi1);\r\n\tvec3 Pf0 = fract(P); // Fractional part for interpolation\r\n\tvec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\r\n\tvec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\r\n\tvec4 iy = vec4(Pi0.yy, Pi1.yy);\r\n\tvec4 iz0 = Pi0.zzzz;\r\n\tvec4 iz1 = Pi1.zzzz;\r\n\r\n\tvec4 ixy = permute(permute(ix) + iy);\r\n\tvec4 ixy0 = permute(ixy + iz0);\r\n\tvec4 ixy1 = permute(ixy + iz1);\r\n\r\n\tvec4 gx0 = ixy0 * (1.0 / 7.0);\r\n\tvec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\r\n\tgx0 = fract(gx0);\r\n\tvec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\r\n\tvec4 sz0 = step(gz0, vec4(0.0));\r\n\tgx0 -= sz0 * (step(0.0, gx0) - 0.5);\r\n\tgy0 -= sz0 * (step(0.0, gy0) - 0.5);\r\n\r\n\tvec4 gx1 = ixy1 * (1.0 / 7.0);\r\n\tvec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\r\n\tgx1 = fract(gx1);\r\n\tvec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\r\n\tvec4 sz1 = step(gz1, vec4(0.0));\r\n\tgx1 -= sz1 * (step(0.0, gx1) - 0.5);\r\n\tgy1 -= sz1 * (step(0.0, gy1) - 0.5);\r\n\r\n\tvec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\r\n\tvec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\r\n\tvec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\r\n\tvec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\r\n\tvec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\r\n\tvec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\r\n\tvec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\r\n\tvec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\r\n\r\n\tvec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\r\n\tg000 *= norm0.x;\r\n\tg010 *= norm0.y;\r\n\tg100 *= norm0.z;\r\n\tg110 *= norm0.w;\r\n\tvec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\r\n\tg001 *= norm1.x;\r\n\tg011 *= norm1.y;\r\n\tg101 *= norm1.z;\r\n\tg111 *= norm1.w;\r\n\r\n\tfloat n000 = dot(g000, Pf0);\r\n\tfloat n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\r\n\tfloat n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\r\n\tfloat n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\r\n\tfloat n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\r\n\tfloat n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\r\n\tfloat n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\r\n\tfloat n111 = dot(g111, Pf1);\r\n\r\n\tvec3 fade_xyz = fade(Pf0);\r\n\tvec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\r\n\tvec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\r\n\tfloat n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\r\n\treturn 2.2 * n_xyz;\r\n}\r\nvarying vec2 vUv;\r\nvarying float noise;\r\nuniform float time;\r\n\r\nfloat turbulence( vec3 p ) {\r\n\tfloat w = 100.0;\r\n\tfloat t = -.5;\r\n\tfor (float f = 1.0 ; f <= 10.0 ; f++ ){\r\n\t\tfloat power = pow( 2.0, f );\r\n\t\tt += abs( pnoise( vec3( power * p ), vec3( 10.0, 10.0, 10.0 ) ) / power );\r\n\t}\r\n\treturn t;\r\n}\r\n\r\nvoid main() {\r\n\r\n\tvUv = uv;\r\n\r\n\t// add time to the noise parameters so it's animated\r\n\tnoise = 10.0 *  -.10 * turbulence( .5 * normal + time );\r\n\tfloat b = 5.0 * pnoise( 0.05 * position + vec3( 2.0 * time ), vec3( 100.0 ) );\r\n\tfloat displacement = - noise + b;\r\n\r\n\tvec3 newPosition = position + normal * displacement;\r\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( newPosition, 1.0 );\r\n\r\n}"}