{"fragmennt":["varying vec2 vUv;\r","varying float noise;\r","\r","void main() {\r","\r","\t// compose the colour using the UV coordinate\r","\t// and modulate it with the noise like ambient occlusion\r","\tvec3 color = vec3( vUv * ( 1. - 2. * noise ), 0.0 );\r","\tgl_FragColor = vec4( color.rgb, 1.0 );\r","\r","}"],"vertex":["//\r","// GLSL textureless classic 3D noise \"cnoise\",\r","// with an RSL-style periodic variant \"pnoise\".\r","// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\r","// Version: 2011-10-11\r","//\r","// Many thanks to Ian McEwan of Ashima Arts for the\r","// ideas for permutation and gradient selection.\r","//\r","// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\r","// Distributed under the MIT license. See LICENSE file.\r","// https://github.com/ashima/webgl-noise\r","//\r","\r","vec3 mod289(vec3 x)\r","{\r","  return x - floor(x * (1.0 / 289.0)) * 289.0;\r","}\r","\r","vec4 mod289(vec4 x)\r","{\r","  return x - floor(x * (1.0 / 289.0)) * 289.0;\r","}\r","\r","vec4 permute(vec4 x)\r","{\r","  return mod289(((x*34.0)+1.0)*x);\r","}\r","\r","vec4 taylorInvSqrt(vec4 r)\r","{\r","  return 1.79284291400159 - 0.85373472095314 * r;\r","}\r","\r","vec3 fade(vec3 t) {\r","  return t*t*t*(t*(t*6.0-15.0)+10.0);\r","}\r","\r","// Classic Perlin noise\r","float cnoise(vec3 P)\r","{\r","  vec3 Pi0 = floor(P); // Integer part for indexing\r","  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\r","  Pi0 = mod289(Pi0);\r","  Pi1 = mod289(Pi1);\r","  vec3 Pf0 = fract(P); // Fractional part for interpolation\r","  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\r","  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\r","  vec4 iy = vec4(Pi0.yy, Pi1.yy);\r","  vec4 iz0 = Pi0.zzzz;\r","  vec4 iz1 = Pi1.zzzz;\r","\r","  vec4 ixy = permute(permute(ix) + iy);\r","  vec4 ixy0 = permute(ixy + iz0);\r","  vec4 ixy1 = permute(ixy + iz1);\r","\r","  vec4 gx0 = ixy0 * (1.0 / 7.0);\r","  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\r","  gx0 = fract(gx0);\r","  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\r","  vec4 sz0 = step(gz0, vec4(0.0));\r","  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\r","  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\r","\r","  vec4 gx1 = ixy1 * (1.0 / 7.0);\r","  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\r","  gx1 = fract(gx1);\r","  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\r","  vec4 sz1 = step(gz1, vec4(0.0));\r","  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\r","  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\r","\r","  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\r","  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\r","  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\r","  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\r","  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\r","  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\r","  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\r","  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\r","\r","  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\r","  g000 *= norm0.x;\r","  g010 *= norm0.y;\r","  g100 *= norm0.z;\r","  g110 *= norm0.w;\r","  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\r","  g001 *= norm1.x;\r","  g011 *= norm1.y;\r","  g101 *= norm1.z;\r","  g111 *= norm1.w;\r","\r","  float n000 = dot(g000, Pf0);\r","  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\r","  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\r","  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\r","  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\r","  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\r","  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\r","  float n111 = dot(g111, Pf1);\r","\r","  vec3 fade_xyz = fade(Pf0);\r","  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\r","  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\r","  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\r","  return 2.2 * n_xyz;\r","}\r","\r","// Classic Perlin noise, periodic variant\r","float pnoise(vec3 P, vec3 rep)\r","{\r","  vec3 Pi0 = mod(floor(P), rep); // Integer part, modulo period\r","  vec3 Pi1 = mod(Pi0 + vec3(1.0), rep); // Integer part + 1, mod period\r","  Pi0 = mod289(Pi0);\r","  Pi1 = mod289(Pi1);\r","  vec3 Pf0 = fract(P); // Fractional part for interpolation\r","  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\r","  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\r","  vec4 iy = vec4(Pi0.yy, Pi1.yy);\r","  vec4 iz0 = Pi0.zzzz;\r","  vec4 iz1 = Pi1.zzzz;\r","\r","  vec4 ixy = permute(permute(ix) + iy);\r","  vec4 ixy0 = permute(ixy + iz0);\r","  vec4 ixy1 = permute(ixy + iz1);\r","\r","  vec4 gx0 = ixy0 * (1.0 / 7.0);\r","  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\r","  gx0 = fract(gx0);\r","  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\r","  vec4 sz0 = step(gz0, vec4(0.0));\r","  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\r","  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\r","\r","  vec4 gx1 = ixy1 * (1.0 / 7.0);\r","  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\r","  gx1 = fract(gx1);\r","  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\r","  vec4 sz1 = step(gz1, vec4(0.0));\r","  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\r","  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\r","\r","  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\r","  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\r","  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\r","  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\r","  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\r","  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\r","  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\r","  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\r","\r","  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\r","  g000 *= norm0.x;\r","  g010 *= norm0.y;\r","  g100 *= norm0.z;\r","  g110 *= norm0.w;\r","  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\r","  g001 *= norm1.x;\r","  g011 *= norm1.y;\r","  g101 *= norm1.z;\r","  g111 *= norm1.w;\r","\r","  float n000 = dot(g000, Pf0);\r","  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\r","  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\r","  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\r","  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\r","  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\r","  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\r","  float n111 = dot(g111, Pf1);\r","\r","  vec3 fade_xyz = fade(Pf0);\r","  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\r","  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\r","  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\r","  return 2.2 * n_xyz;\r","}\r","\r","varying vec2 vUv;\r","varying float noise;\r","\r","float turbulence( vec3 p ) {\r","\tfloat w = 100.0;\r","\tfloat t = -.5;\r","\tfor (float f = 1.0 ; f <= 10.0 ; f++ ){\r","\t\tfloat power = pow( 2.0, f );\r","\t\tt += abs( pnoise( vec3( power * p ), vec3( 10.0, 10.0, 10.0 ) ) / power );\r","\t}\r","\treturn t;\r","}\r","\r","void main() {\r","\r","\tvUv = uv;\r","\r","\t// get a turbulent 3d noise using the normal, normal to high freq\r","\tnoise = 10.0 *  -.10 * turbulence( .5 * normal );\r","\t// get a 3d noise using the position, low frequency\r","\tfloat b = 5.0 * pnoise( 0.05 * position, vec3( 100.0 ) );\r","\t// compose both noises\r","\tfloat displacement = - 10. * noise + b;\r","\r","\t// move the position along the normal and transform it\r","\tvec3 newPosition = position + normal * displacement;\r","\tgl_Position = projectionMatrix * modelViewMatrix * vec4( newPosition, 1.0 );\r","\r","}"]}