{"fragment":"uniform sampler2D texture;\r\nvarying vec4 vColor;\r\nvarying float vAngle;\r\n\r\nvoid main() {\r\n\tgl_FragColor = vColor;\r\n\r\n\tfloat c = cos(vAngle);\r\n\tfloat s = sin(vAngle);\r\n\tvec2 rotatedUV = vec2(c * (gl_PointCoord.x - 0.5) + s * (gl_PointCoord.y - 0.5) + 0.5,\r\n\t\t\t\t\t\t\tc * (gl_PointCoord.y - 0.5) - s * (gl_PointCoord.x - 0.5) + 0.5);\r\n\tvec4 rotatedTexture = texture2D( texture,  rotatedUV );\r\n\tgl_FragColor = gl_FragColor * rotatedTexture;\r\n}","vertex":"attribute vec3  customColor;\r\nattribute float customOpacity;\r\nattribute float customSize;\r\nattribute float customAngle;\r\nattribute float customVisible;  // float used as boolean (0 = false, 1 = true)\r\nvarying vec4 vColor;\r\nvarying float vAngle;\r\nvoid main() {\r\n\tif (customVisible > 0.5) {\r\n\t\tvColor = vec4(customColor, customOpacity); //set color associated to vertex; use later in fragment shader.\r\n\t} else {\r\n\t\tvColor = vec4(0.0, 0.0, 0.0, 0.0);//make particle invisible.\r\n\t}\r\n\r\n\tvAngle = customAngle;\r\n\r\n\tvec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\r\n\tgl_PointSize = customSize * (300.0 / length(mvPosition.xyz));// scale particles as objects in 3D space\r\n\tgl_Position = projectionMatrix * mvPosition;\r\n}"}